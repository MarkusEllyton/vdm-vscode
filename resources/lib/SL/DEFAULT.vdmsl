
-- 	VDMTools STANDARD LIBRARY: INPUT/OUTPUT
--      --------------------------------------------
-- 
-- Standard library for the VDMTools Interpreter. When the interpreter
-- evaluates the preliminary functions/operations in this file,
-- corresponding internal functions is called instead of issuing a run
-- time error. Signatures should not be changed, as well as name of
-- module (VDM-SL) or class (VDM++). Pre/post conditions is 
-- fully user customisable. 
-- Dont care's may NOT be used in the parameter lists.
--
-- The in/out functions  will return false if an error occurs. In this
-- case an internal error string will be set (see 'ferror').

types
 
filedirective = <start>|<append> 

functions

-- Write VDM value in ASCII format to std out:
writeval[@p]: @p -> bool
writeval(val)==
  is not yet specified;

-- Write VDM value in ASCII format to file.
-- fdir = <start> will overwrite existing file,
-- fdir = <append> will append output to the file (created if
-- not existing).
fwriteval[@p]:seq1 of char * @p * filedirective -> bool
fwriteval(filename,val,fdir) ==
  is not yet specified;

-- Read VDM value in ASCII format from file
freadval[@p]:seq1 of char -> bool * [@p]
freadval(f) ==
  is not yet specified
  post let mk_(b,t) = RESULT in not b => t = nil;

operations

-- Write text to std out. Surrounding double quotes will be stripped,
-- backslashed characters should be interpreted.
echo: seq of char ==> bool
echo(text) ==
  fecho ("",text,nil);

-- Write text to file like 'echo'
fecho: seq of char * seq of char * [filedirective] ==> bool
fecho (filename,text,fdir) ==
  is not yet specified
  pre filename = "" <=> fdir = nil;

-- The in/out functions  will return false if an error occur. In this
-- case an internal error string will be set. 'ferror' returns this
-- string and set it to "".
ferror:()  ==> seq of char
ferror () ==
  is not yet specified;

-- New simplified format printing operations
-- The questionmark in the signature simply means any type
print: ? ==> ()
print(arg) ==
  is not yet specified;

-- New simplified format printing operations
-- The questionmark in the signature simply means any type
println: ? ==> ()
println(arg) ==
  is not yet specified;

-- New simplified format printing operations
-- The questionmark in the signature simply means any type
printf: seq of char * seq of ? ==> ()
printf(format, args) ==
  is not yet specified;

-- 	VDMTools STANDARD LIBRARY: MATH
--      --------------------------------------------
-- 
-- Standard library for the VDMTools Interpreter. When the interpreter
-- evaluates the preliminary functions/operations in this file,
-- corresponding internal functions is called instead of issuing a run
-- time error. Signatures should not be changed, as well as name of
-- module (VDM-SL) or class (VDM++). Pre/post conditions is 
-- fully user customisable. 
-- Dont care's may NOT be used in the parameter lists.

  functions
    sin:real +> real
    sin(v) ==
    is not yet specified    
    post abs RESULT <= 1;

    cos:real +> real
    cos(v) ==
    is not yet specified
    post abs RESULT <= 1;

    tan:real -> real
    tan(a) ==
    is not yet specified
    pre cos(a) <> 0;

    cot:real -> real	
    cot(a) ==
    is not yet specified -- Could also be: 1/tan(r)
    pre sin(a) <> 0;

    asin:real -> real
    asin(a) ==
    is not yet specified
    pre abs a <= 1;

    acos:real -> real
    acos(a) ==
    is not yet specified
    pre abs a <= 1;

    atan:real +> real
    atan(v) ==
    is not yet specified;

    acot:real +> real
    acot(a) ==
    atan(1/a)
    pre a <> 0;

    sqrt:real -> real
    sqrt(a) ==
    is not yet specified
    ;--pre a >= 0;

    pi_f:() +> real
    pi_f () ==
    is not yet specified

  operations

    srand:int ==> ()
    srand(a) ==
    let - = srand2(a) in skip
    pre a >= -1;

    rand:int ==> int 
    rand(a) ==
    is not yet specified;

    srand2:int ==> int 
    srand2(a) ==
    is not yet specified
    pre a >= -1

  functions

    exp:real +> real
    exp(a) ==
    is not yet specified;

    ln:real -> real
    ln(a) ==
    is not yet specified
    pre a > 0;

    log:real -> real
    log(a) ==
    is not yet specified
    pre a > 0;

    fac:nat -> nat1
    fac(a) ==
    is not yet specified
    -- pre a < 26;

  values
    pi = pi_f();
    euler = exp(1);

 
-- 	VDMTools STANDARD LIBRARY: MiscUtils
--      --------------------------------------------
-- 
-- Standard library for the VDMTools Interpreter. When the interpreter
-- evaluates the preliminary functions/operations in this file,
-- corresponding internal functions is called instead of issuing a run
-- time error. Signatures should not be changed, as well as name of
-- module (VDM-SL) or class (VDM++). Pre/post conditions is 
-- fully user customisable. 
-- Dont care's may NOT be used in the parameter lists.

functions
-- Converts a set argument into a sequence in non-deterministic order.
set2seq[@T] : set of @T +> seq of @T
set2seq(x) == is not yet specified;

-- Returns a context information tuple which represents
-- (fine_name * line_num * column_num * module_name * fnop_name) of corresponding source text
get_file_pos : () +> [ seq of char * nat * nat * seq of char * seq of char ]
get_file_pos() == is not yet specified;

-- Converts a VDM value into a seq of char.
val2seq_of_char[@T] : @T +> seq of char
val2seq_of_char(x) == is not yet specified;

-- converts VDM value in ASCII format into a VDM value
-- RESULT.#1 = false implies a conversion failure
seq_of_char2val[@p]:seq1 of char -> bool * [@p]
seq_of_char2val(s) ==
  is not yet specified
  post let mk_(b,t) = RESULT in not b => t = nil;

