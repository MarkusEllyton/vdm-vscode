<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="The number of times that operation name operation has been activated" enabled="true" id="actVDMPP" name="act">#act(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="The number of times that operation name operation has been activated" enabled="true" id="actVDMRT" name="act">#act(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="The number of operation name operations that are currently active." enabled="true" id="activeVDMPP" name="active">#active(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="The number of operation name operations that are currently active." enabled="true" id="activeVDMRT" name="active">#active(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="BUS (Priority &lt;CSMACD&gt;, capacity,set of connected CPUs)" enabled="true" id="busVDMRT" name="bus">${busName} : BUS := new BUS (${priority}, ${speed}, {${CPU1}, ${CPU2}});</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Case Expression" enabled="true" id="caseExpressionVDMPP" name="caseExpression">cases ${expression}:
	${patternList1} -&gt; ${expression1},
	${patternList2} -&gt; ${expression2},
	others -&gt; ${expressionOthers}
end;</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Case Expression" enabled="true" id="caseExpressionVDMRT" name="caseExpression">cases ${expression}:
	${patternList1} -&gt; ${expression1},
	${patternList2} -&gt; ${expression2},
	others -&gt; ${expressionOthers}
end;</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Case Expression" enabled="true" id="caseExpressionVDMSL" name="caseExpression">cases ${expression}:
	${patternList1} -&gt; ${expression1},
	${patternList2} -&gt; ${expression2},
	others -&gt; ${expressionOthers}
end;</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Class Definition" enabled="true" id="classVDMPP" name="class">class ${className}

end ${className}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Class Definition" enabled="true" id="classVDMRT" name="class">class ${className}

end ${className}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Class Definition full skeleton" enabled="true" id="classSkeletonVDMPP" name="classSkeleton">class ${className}
types
	${cursor}
values
	
instance variables

operations

functions

end ${className}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Class Definition full skeleton" enabled="true" id="classSkeletonVDMRT" name="classSkeleton">class ${className}
types
	${cursor}
values
	
instance variables

operations

functions

end ${className}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="CPU (Priority &lt;FP/FCFS&gt;, capacity)" enabled="true" id="cpuVDMRT" name="cpu">${cpuName} : CPU := new CPU (${priority}, ${speed});</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Cycles(number of cycles)statement" enabled="true" id="cycleVDMRT" name="cycle">cycles(${numberOfCycles})${statement};</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Declare" enabled="true" id="dclStatementVDMPP" name="dclStatement">dcl ${name} : ${nameType};
	${name} := ${expression}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Declare" enabled="true" id="dclStatementVDMRT" name="dclStatement">dcl ${name} : ${nameType};
	${name} := ${expression}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Declare" enabled="true" id="dclStatementVDMSL" name="dclStatement">dcl ${name} : ${nameType};
	${name} := ${expression}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="def pattern = expression1 in expression2" enabled="true" id="defExpressionVDMPP" name="defExpression">def ${pattern} = ${expression1} in
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="def pattern = expression1 in expression2" enabled="true" id="defExpressionVDMRT" name="defExpression">def ${pattern} = ${expression1} in
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="def pattern = expression1 in expression2" enabled="true" id="defExpressionVDMSL" name="defExpression">def ${pattern} = ${expression1} in
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Duration(time in milliceconds)statement" enabled="true" id="durationVDMRT" name="duration">duration(${time})${statement};</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="exists bindList &amp; predicate" enabled="true" id="existsVDMPP" name="exists">exists ${bindList} &amp; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="exists bindList &amp; predicate" enabled="true" id="existsVDMRT" name="exists">exists ${bindList} &amp; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="exists bindList &amp; predicate" enabled="true" id="existsVDMSL" name="exists">exists ${bindList} &amp; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="The number of times that the operation name operation has been completed" enabled="true" id="finVDMPP" name="fin">#fin(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="The number of times that the operation name operation has been completed" enabled="true" id="finVDMRT" name="fin">#fin(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="forall bind list &amp; predicate" enabled="true" id="forallVDMPP" name="forall">forall ${bindList} &amp; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="forall bind list &amp; predicate" enabled="true" id="forallVDMRT" name="forall">forall ${bindList} &amp; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="forall bind list &amp; predicate" enabled="true" id="forallVDMSL" name="forall">forall ${bindList} &amp; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="for all in set do" enabled="true" id="forallinsetVDMPP" name="forallinset">for all ${pattern} in set ${s} do
    ${statement}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="for all in set do" enabled="true" id="forallinsetVDMRT" name="forallinset">for all ${pattern} in set ${s} do
    ${statement}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="for all in set do" enabled="true" id="forallinsetVDMSL" name="forallinset">for all ${pattern} in set ${s} do
    ${statement}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="for identifier = expression1 to expression2 do\n statement" enabled="true" id="forallLoopVDMPP" name="forallLoop">for ${identifier} = ${initialValue} to ${upperValue} do
	${statement}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="for identifier = expression1 to expression2 do\n statement" enabled="true" id="forallLoopVDMRT" name="forallLoop">for ${identifier} = ${initialValue} to ${upperValue} do
	${statement}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="for identifier = expression1 to expression2 do\n statement" enabled="true" id="forallLoopVDMSL" name="forallLoop">for ${identifier} = ${initialValue} to ${upperValue} do
	${statement}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Explicit function" enabled="true" id="functionExplicitVDMPP" name="functionExplicit">${private} ${functionName} :  ${parameterTypes} -&gt; ${resultType}
${functionName} (${parameterNames}) == ${expression};</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Explicit function" enabled="true" id="functionExplicitVDMRT" name="functionExplicit">${private} ${functionName} :  ${parameterTypes} -&gt; ${resultType}
${functionName} (${parameterNames}) == ${expression};</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Explicit function" enabled="true" id="functionExplicitVDMSL" name="functionExplicit">${functionName} :  ${parameterTypes} -&gt; ${resultType}
${functionName} (${parameterNames}) == ${expression};</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Implicit function" enabled="true" id="functionImplicitVDMPP" name="functionImplicit">${private} ${functionName} (${parameters}) ${resultName}: ${resultType}
pre ${predicate1}
post ${predicate2}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Implicit function" enabled="true" id="functionImplicitVDMRT" name="functionImplicit">${private} ${functionName} (${parameters}) ${resultName}: ${resultType}
pre ${predicate1}
post ${predicate2}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Implicit function" enabled="true" id="functionImplicitVDMSL" name="functionImplicit">${functionName} (${parameters}) ${resultName}: ${resultType}
pre ${predicate1}
post ${predicate2}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Function block" enabled="true" id="functionsVDMPP" name="functions">
functions
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Function block" enabled="true" id="functionsVDMRT" name="functions">
functions
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Function block" enabled="true" id="functionsVDMSL" name="functions">
functions
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="if predicate then expression1 else expression2" enabled="true" id="ifthenVDMPP" name="ifthen">if ${predicate} 
then 
	${expression1} 
else
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="if predicate then expression1 else expression2" enabled="true" id="ifthenVDMRT" name="ifthen">if ${predicate} 
then 
	${expression1} 
else
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="if predicate then expression1 else expression2" enabled="true" id="ifthenVDMSL" name="ifthen">if ${predicate} 
then 
	${expression1} 
else
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Instance Variables block" enabled="true" id="instancevariablesVDMPP" name="instancevariables">
instance variables
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Instance Variables block" enabled="true" id="instancevariablesVDMRT" name="instancevariables">
instance variables
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="is not yet specified" enabled="true" id="isnotyetspecifiedVDMPP" name="isnotyetspecified">is not yet specified</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="is not yet specified" enabled="true" id="isnotyetspecifiedVDMRT" name="isnotyetspecified">is not yet specified</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Test if an object is of a specific base class" enabled="true" id="isofbaseclassVDMPP" name="isofbaseclass">isofbaseclass(${ClassTypeName}, ${objectName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Test if an object is of a specific base class" enabled="true" id="isofbaseclassVDMRT" name="isofbaseclass">isofbaseclass(${ClassTypeName}, ${objectName})</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Test if an object is of class" enabled="true" id="isofclassVDMPP" name="isofclass">isofclass(${ClassTypeName}, ${objectName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Test if an object is of class" enabled="true" id="isofclassVDMRT" name="isofclass">isofclass(${ClassTypeName}, ${objectName})</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Is subclass of" enabled="true" id="issubclassofVDMPP" name="issubclassof">is subclass of</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Is subclass of" enabled="true" id="issubclassofVDMRT" name="issubclassof">is subclass of</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Is subclass responsibility" enabled="true" id="issubclassresponsibilityVDMPP" name="issubclassresponsibility">is subclass responsibility</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Is subclass responsibility" enabled="true" id="issubclassresponsibilityVDMRT" name="issubclassresponsibility">is subclass responsibility</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="let pattern = expression1 in expression2" enabled="true" id="letVDMPP" name="let">let ${pattern} = ${expression1} in
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="let pattern = expression1 in expression2" enabled="true" id="letVDMRT" name="let">let ${pattern} = ${expression1} in
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="let pattern = expression1 in expression2" enabled="true" id="letVDMSL" name="let">let ${pattern} = ${expression1} in
	${expression2}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Module" enabled="true" id="moduleVDMSL" name="module">module ${moduleName}
	exports all
	definitions

end ${moduleName}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Module Full skeleton of a module" enabled="true" id="moduleSkeletonVDMSL" name="moduleSkeleton">module ${moduleName}
	exports all
	definitions
	
	state ${stateName} of
	end

	types

	values

	operations

	functions

end ${moduleName}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Mutex operation" enabled="true" id="mutexVDMPP" name="mutex">mutex ${operationName}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Mutex operation" enabled="true" id="mutexVDMRT" name="mutex">mutex ${operationName}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Explicit Operation" enabled="true" id="operationExplicitVDMPP" name="operationExplicit">${private} ${operationName} : ${parameterTypes} ==&gt; ${resultType}
${operationName} (${parameterNames}) == ${statements};</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Explicit Operation" enabled="true" id="operationExplicitVDMRT" name="operationExplicit">${private} ${operationName} : ${parameterTypes} ==&gt; ${resultType}
${operationName} (${parameterNames}) == ${statements};</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Explicit Operation" enabled="true" id="operationExplicitVDMSL" name="operationExplicit">${operationName} : ${parameterTypes} ==&gt; ${resultType}
${operationName} (${parameterNames}) == ${statements};</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Implicit operation" enabled="true" id="operationImplicitVDMPP" name="operationImplicit">${private} ${operationName} (${parameters}) ${resultName}: ${resultType}
	ext rd ${instanceVariable1} : ${instanceVariable1Type}
	wr ${instanceVariable2} : ${instanceVariable2Type}
	pre ${predicate1}
	post ${predicate2};</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Implicit operation" enabled="true" id="operationImplicitVDMRT" name="operationImplicit">${private} ${operationName} (${parameters}) ${resultName}: ${resultType}
	ext rd ${instanceVariable1} : ${instanceVariable1Type}
	wr ${instanceVariable2} : ${instanceVariable2Type}
	pre ${predicate1}
	post ${predicate2};</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Implicit operation" enabled="true" id="operationImplicitVDMSL" name="operationImplicit">${operationName} (${parameters}) ${resultName}: ${resultType}
	ext rd ${instanceVariable1} : ${instanceVariable1Type}
	wr ${instanceVariable2} : ${instanceVariable2Type}
	pre ${predicate1}
	post ${predicate2};</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Operation block" enabled="true" id="operationsVDMPP" name="operations">
operations
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Operation block" enabled="true" id="operationsVDMRT" name="operations">
operations
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Operation block" enabled="true" id="operationsVDMSL" name="operations">
operations
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Permission predicate for an operation, history counters can be used: £fin, #act, #active, #req, #waiting" enabled="true" id="perVDMPP" name="per">per ${operationName} =&gt; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Permission predicate for an operation, history counters can be used: £fin, #act, #active, #req, #waiting" enabled="true" id="perVDMRT" name="per">per ${operationName} =&gt; ${predicate}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="periodic(periode,jitter,delay,offset)(operation name)" enabled="true" id="periodicVDMRT" name="periodic">periodic(${periode},${jitter},${delay},${offset})(${operationName});</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="The number of requests that has been issued for the operation name operation" enabled="true" id="reqVDMPP" name="req">#req(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="The number of requests that has been issued for the operation name operation" enabled="true" id="reqVDMRT" name="req">#req(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Test if two objects are of the same type" enabled="true" id="samebaseclassVDMPP" name="samebaseclass">samebaseclass(${objectName}, ${objectName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Test if two objects are of the same type" enabled="true" id="samebaseclassVDMRT" name="samebaseclass">samebaseclass(${objectName}, ${objectName})</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Get a reference to the current object" enabled="true" id="selfVDMPP" name="self">self</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Get a reference to the current object" enabled="true" id="selfVDMRT" name="self">self</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="State Definition Block" enabled="true" id="stateVDMSL" name="state">state ${name} of
	  ${field1} : ${type1}
	  inv mk_${name}(${field1}) == ${exp1}
	  init s == s = mk_${name}(${exp2})
	end</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Synchronization block" enabled="true" id="syncVDMPP" name="sync">
sync
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Synchronization block" enabled="true" id="syncVDMRT" name="sync">
sync
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="System skeleton" enabled="true" id="systemVDMRT" name="system">system ${systemName}
instance variables
	cpu1 : CPU := new CPU(&lt;FP&gt;, 22E6);
	cpu2 : CPU := new CPU(&lt;FP&gt;, 22E6);
	bus1 : BUS := new BUS(&lt;CSMACD&gt;, 72E3,{ cpu1,cpu2});

	${cursor}
operations

public ${systemName} : () ==&gt; ${systemName}
${systemName}()==
(
	skip;
);

end ${systemName}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Get the current time" enabled="true" id="timeVDMRT" name="time">time</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Values block" enabled="true" id="valuesVDMPP" name="values">
values
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Values block" enabled="true" id="valuesVDMRT" name="values">
values
	${cursor}</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="Literate VDM" enabled="true" id="literateVdmVDMPP" name="vdm_al">
\begin{vdm_al}
${cursor}
\end{vdm_al}
  </template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="Literate VDM" enabled="true" id="literateVdmVDMRT" name="vdm_al">
\begin{vdm_al}
${cursor}
\end{vdm_al}
  </template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="Literate VDM" enabled="true" id="literateVdmVDMSL" name="vdm_al">
\begin{vdm_al}
${cursor}
\end{vdm_al}
	</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="The number of outstanding requests for the operation name operation" enabled="true" id="waitingVDMPP" name="waiting">#waiting(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="The number of outstanding requests for the operation name operation" enabled="true" id="waitingVDMRT" name="waiting">#waiting(${operationName})</template><template autoinsert="true" context="org.overture.ide.vdmpp.ui.contextType" deleted="false" description="while predicate do statement" enabled="true" id="whileVDMPP" name="while">while ${predicate} 
do ${statement}</template><template autoinsert="true" context="org.overture.ide.vdmrt.ui.contextType" deleted="false" description="while predicate do statement" enabled="true" id="whileVDMRT" name="while">while ${predicate} 
do ${statement}</template><template autoinsert="true" context="org.overture.ide.vdmsl.ui.contextType" deleted="false" description="while predicate do statement" enabled="true" id="whileVDMSL" name="while">while ${predicate} 
do ${statement}</template></templates>